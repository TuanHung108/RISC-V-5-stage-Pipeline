module IFID_reg(
    input clk, rst_n,
    input stallD, flushD,             // tín hiệu từ hazard_unit
    input [31:0] instF, pcF, pcplus4F, // giá trị từ IF stage
    output reg [31:0] instD, pcD, pcplus4D // giá trị sang ID stage
);
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            instD    <= 32'b0;
            pcD      <= 32'b0;
            pcplus4D <= 32'b0;
        end else if (flushD && !stallD) begin
            instD    <= 32'b0;
            pcD      <= 32'b0;
            pcplus4D <= 32'b0;
        end else if (!stallD) begin
            instD    <= instF;
            pcD      <= pcF;
            pcplus4D <= pcplus4F;
        end
    end
endmodule


module IDEX_reg(
    input clk, rst_n,
    input regwriteD, resultsrcD, memwriteD, jumpD, branchD, aluctrlD, alusrcD, immsrcD,
    input [31:0] rs1_in, rs2_in,
    output reg [31:0] rs1_out, rs2_out,
    output reg regwriteE, resultsrcE, memwriteE, jumpE, branchE, aluctrlE, alusrcE
);
    always @(posedge clk or negedge rst_n) begin
        if(!rst_n) begin
            rs1_out <= 32'b0;
            rs2_out <= 32'b0;
            regwriteE <= 1'b0;
            resultsrcE <= 1'b0;
            memwriteE <= 1'b0;
            jumpE <= 1'b0;
            branchE <= 1'b0;
            aluctrlE <= 1'b0;
            alusrcE <= 1'b0;
            immsrcD <= 1'b0;
        end else begin 
            rs1_out <= rs1_in;
            rs2_out <= rs2_in;
            regwriteE <= regwriteD;
            resultsrcD <= resultsrcD;
            memwriteE <= memwriteD;
            jumpE <= jumpD;
            branchE <= branchD;
            aluctrlE <= aluctrlD;
            alusrcE <= alusrcD;
        end
    end
endmodule

module EXMEM_reg(
    input clk, rst_n,
    input regwriteE, resultsrcE, memwriteE,
    input [31:0] aluout_in, writedata_in,
    output reg [31:0] aluout_out, writedata_out,
    output reg regwriteM, resultsrcM, memwriteM
);
    always @(posedge clk or negedge rst_n) begin
        if(!rst_n) begin
            aluout_out <= 32'b0;
            writedata_out <= 32'b0;
            regwriteM <= 1'b0;
            resultsrcM <= 1'b0;
            memwriteM <= 1'b0;
        end else begin 
            aluout_out <= aluout_in;
            writedata_out <= writedata_in;
            regwriteM <= regwriteE;
            resultsrcM <= resultsrcE;
            memwriteM <= memwriteE;
        end
    end
endmodule

module MEMWB_reg(
    input clk, rst_n,
    input regwriteM, resultsrcM,
    input [31:0] readdata_in, aluout_in,
    output reg [31:0] readdata_out, aluout_out,
    output reg regwriteW, resultsrcW
);
    always @(posedge clk or negedge rst_n) begin
        if(!rst_n) begin
            readdata_out <= 32'b0;
            aluout_out <= 32'b0;
            regwriteW <= 1'b0;
            resultsrcW <= 1'b0;
        end else begin 
            readdata_out <= readdata_in;
            aluout_out <= aluout_in;
            regwriteW <= regwriteM;
            resultsrcW <= resultsrcM;
        end
    end
endmodule